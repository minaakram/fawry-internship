# Reflective Section for Task Q1 (Custom Command: mygrep.sh)

---

## 1) Breakdown: How does the script handle arguments and options?

The script first checks if the user provided a sufficient number of arguments (at least 2).  
If not, it prints a usage/help message and exits.

Next, it checks if the first argument starts with a dash (`-`), meaning it's an option (`-n`, `-v`, or a combination like `-vn`).  
The script then extracts the search string and the file name based on the position of the options.

It also verifies whether the provided file actually exists.  
If the file is missing, it displays an error message and exits.

Finally, it reads the file line by line, performs a case-insensitive search, and:
- Prints matching lines.
- Adds line numbers if `-n` is present.
- Inverts matches if `-v` is present (i.e., prints non-matching lines).

The script is designed to handle combinations of `-v` and `-n` regardless of the order (`-vn` = `-nv`).

---

## 2) If you were to add support for Regex or options like `-i`, `-c`, `-l`, how would you change the structure?

To support additional options like `-i` (ignore case), `-c` (count matches), or `-l` (list filenames with matches):

- I would use `getopts` for proper and scalable option parsing instead of manually parsing arguments.
- I would introduce new variables (flags) for each new option.
- The matching logic would be expanded to:
  - Count the number of matches (`-c`).
  - Output only the filename if matches are found (`-l`).
  - Always ignore case (`-i`), which is already partially handled.

If regex support is needed, the script would switch to using `grep -E` or native regex matching inside bash with `[[ ]]` and regular expressions.

---

## 3) What was the hardest part of the script and why?

The hardest part was correctly parsing multiple combined options like `-vn` or `-nv`, because:
- I had to ensure that both `-v` and `-n` are detected regardless of their order.
- I needed to implement clean and independent logic for each option while ensuring they interact properly when combined.
- Handling invalid input scenarios robustly without making the script overcomplicated was also challenging.

---
